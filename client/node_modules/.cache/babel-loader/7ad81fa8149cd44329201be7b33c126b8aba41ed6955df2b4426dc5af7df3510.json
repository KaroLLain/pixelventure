{"ast":null,"code":"var _ScrollService;\nimport { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactUsScreen = document.getElementById(\"Contact Us\");\n      if (!contactUsScreen) return;\n      contactUsScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewPort);\n  }\n}\n_ScrollService = ScrollService;\nScrollService.scrollService = new _ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactUsScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","checkCurrentScreenUnderViewPort","_ScrollService","scrollService"],"sources":["D:/Pulpit/pixelventures/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\r\nimport { Subject } from 'rxjs';\r\n \r\nexport default class ScrollService {\r\n    static scrollService = new ScrollService();\r\n \r\n    static currentScreenBroadCaster = new Subject();\r\n    static currentScreenFadeIn = new Subject();\r\n \r\n \r\n    constructor() {\r\n        window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewPort);\r\n \r\n    }\r\n    scrollToHireMe = () => {\r\n        let contactUsScreen = document.getElementById(\"Contact Us\")\r\n        if(!contactUsScreen) return;\r\n        contactUsScreen.scrollIntoView({behavior: \"smooth\"});\r\n    }\r\n    scrollToHome = () => {\r\n        let homeScreen = document.getElementById(\"Home\")\r\n        if(!homeScreen) return;\r\n        homeScreen.scrollIntoView({behavior: \"smooth\"});\r\n    }\r\n    isElementInView = (elem, type) => {\r\n        let rec = elem.getBoundingClientRect();\r\n        let elementTop = rec.top;\r\n        let elementBottom = rec.Bottom;\r\n \r\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\r\n        let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\r\n \r\n        switch(type){\r\n            case \"partial\":\r\n                return partiallyVisible;\r\n \r\n            case \"complete\":\r\n                return completelyVisible;\r\n                default:\r\n                    return false;\r\n        }\r\n    };\r\n \r\n    checkCurrentScreenUnderViewport = (event) => {\r\n        if(!event || Object.keys(event).length < 1)\r\n        return;\r\n        for(let screen of TOTAL_SCREENS){\r\n            let screenFromDOM = document.getElementById(screen.screen_name);\r\n            if(!screenFromDOM)\r\n            continue;\r\n \r\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n            let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n \r\n            if(fullyVisible || partiallyVisible){\r\n                if(partiallyVisible && !screen.alreadyRendered){\r\n                    ScrollService.currentScreenFadeIn.next({\r\n                        fadeInScreen: screen.screen_name\r\n                    });\r\n                    screen['alreadyRendered'] = true;\r\n                    break;\r\n                }\r\n                if(fullyVisible){\r\n                    ScrollService.currentScreenBroadCaster.next({\r\n                        screenInView: screen.screen_name\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}"],"mappings":";AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAE9B,eAAe,MAAMC,aAAa,CAAC;EAO/BC,WAAWA,CAAA,EAAG;IAAA,KAIdC,cAAc,GAAG,MAAM;MACnB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MAC3D,IAAG,CAACF,eAAe,EAAE;MACrBA,eAAe,CAACG,cAAc,CAAC;QAACC,QAAQ,EAAE;MAAQ,CAAC,CAAC;IACxD,CAAC;IAAA,KACDC,YAAY,GAAG,MAAM;MACjB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAG,CAACI,UAAU,EAAE;MAChBA,UAAU,CAACH,cAAc,CAAC;QAACC,QAAQ,EAAE;MAAQ,CAAC,CAAC;IACnD,CAAC;IAAA,KACDG,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAC9B,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,CAAC,CAAC;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAM;MAE9B,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,aAAa,IAAI,CAAC;MAC5E,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,aAAa,IAAIG,MAAM,CAACC,WAAW;MAE9E,QAAOT,IAAI;QACP,KAAK,SAAS;UACV,OAAOO,gBAAgB;QAE3B,KAAK,UAAU;UACX,OAAOG,iBAAiB;QACxB;UACI,OAAO,KAAK;MACxB;IACJ,CAAC;IAAA,KAEDC,+BAA+B,GAAIC,KAAK,IAAK;MACzC,IAAG,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAC1C;MACA,KAAI,IAAIC,MAAM,IAAI9B,aAAa,EAAC;QAC5B,IAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAc,CAACuB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAG,CAACD,aAAa,EACjB;QAEA,IAAIE,YAAY,GAAG,IAAI,CAACrB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAGE,YAAY,IAAIZ,gBAAgB,EAAC;UAChC,IAAGA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAe,EAAC;YAC3ChC,aAAa,CAACiC,mBAAmB,CAACC,IAAI,CAAC;cACnCC,YAAY,EAAEP,MAAM,CAACE;YACzB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACJ;UACA,IAAGG,YAAY,EAAC;YACZ/B,aAAa,CAACoC,wBAAwB,CAACF,IAAI,CAAC;cACxCG,YAAY,EAAET,MAAM,CAACE;YACzB,CAAC,CAAC;YACF;UACJ;QACJ;MACJ;IACJ,CAAC;IA3DGV,MAAM,CAACkB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,+BAA+B,CAAC;EAE3E;AA0DJ;AAACC,cAAA,GApEoBxC,aAAa;AAAbA,aAAa,CACvByC,aAAa,GAAG,IAAIzC,cAAa,CAAC,CAAC;AADzBA,aAAa,CAGvBoC,wBAAwB,GAAG,IAAIrC,OAAO,CAAC,CAAC;AAH9BC,aAAa,CAIvBiC,mBAAmB,GAAG,IAAIlC,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
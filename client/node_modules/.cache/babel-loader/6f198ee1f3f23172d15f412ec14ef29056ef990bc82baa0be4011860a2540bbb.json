{"ast":null,"code":"var _ScrollService;\nimport { TOTAL_SCREENS } from './commonUtils';\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    /* CHECK IF ELEMENT IS IN VIEW */\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n\n      /* Partially Visible */\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n\n      /* Completely Visible */\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            //BROADCAST FADE IN EFFECT\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n          if (fullyVisible) {\n            // BROADCAST SCREEN NAME\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n  }\n}\n_ScrollService = ScrollService;\n/* SINGLETON CLASS INSTANCE */\nScrollService.scrollHandler = new _ScrollService();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","document","getElementById","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","_ScrollService","scrollHandler"],"sources":["D:/Pulpit/pixelventures/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from './commonUtils';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport default class ScrollService {\r\n\r\n  /* SINGLETON CLASS INSTANCE */\r\n  static scrollHandler = new ScrollService();\r\n\r\n  /* CHECK IF ELEMENT IS IN VIEW */\r\n  isElementInView = (elem, type) => {\r\n    let rec = elem.getBoundingClientRect();\r\n    let elementTop = rec.top;\r\n    let elemBottom = rec.bottom;\r\n\r\n    /* Partially Visible */\r\n    let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\r\n\r\n    /* Completely Visible */\r\n    let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\r\n\r\n    switch (type) {\r\n      case \"partial\":\r\n          return partiallyVisible;\r\n        \r\n      case \"complete\":\r\n          return completelyVisible;\r\n    \r\n      default:\r\n          return false;\r\n    }\r\n  };\r\n  \r\n  /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\r\n  checkCurrentScreenUnderViewport = (event) => {\r\n    if(!event || Object.keys(event).length < 1)\r\n    return;\r\n\r\n    for(let screen of TOTAL_SCREENS){\r\n      let screenFromDOM = document.getElementById(screen.screen_name);\r\n      if(!screenFromDOM)\r\n      continue;\r\n\r\n      let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n\r\n      if(fullyVisible || partiallyVisible) {\r\n        if(partiallyVisible && !screen.alreadyRendered){\r\n          //BROADCAST FADE IN EFFECT\r\n          ScrollService.currentScreenFadeIn.next({\r\n            fadeInScreen: screen.screen_name\r\n          });\r\n          screen['alreadyRendered'] = true;\r\n          break;\r\n        }\r\n\r\n        if (fullyVisible) {\r\n          // BROADCAST SCREEN NAME\r\n          ScrollService.currentScreenBroadcaster.next({\r\n            screenInView: screen.screen_name\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}"],"mappings":";AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAE9B,eAAe,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAKjC;IAAA,KACAC,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAChC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,CAAC,CAAC;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,UAAU,GAAGJ,GAAG,CAACK,MAAM;;MAE3B;MACA,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,UAAU,IAAI,CAAC;;MAEzE;MACA,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,UAAU,IAAIG,MAAM,CAACC,WAAW;MAE3E,QAAQT,IAAI;QACV,KAAK,SAAS;UACV,OAAOO,gBAAgB;QAE3B,KAAK,UAAU;UACX,OAAOG,iBAAiB;QAE5B;UACI,OAAO,KAAK;MAClB;IACF,CAAC;IAED;IAAA,KACAC,+BAA+B,GAAIC,KAAK,IAAK;MAC3C,IAAG,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAC1C;MAEA,KAAI,IAAIC,MAAM,IAAItB,aAAa,EAAC;QAC9B,IAAIuB,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAACH,MAAM,CAACI,WAAW,CAAC;QAC/D,IAAG,CAACH,aAAa,EACjB;QAEA,IAAII,YAAY,GAAG,IAAI,CAACvB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAGI,YAAY,IAAId,gBAAgB,EAAE;UACnC,IAAGA,gBAAgB,IAAI,CAACS,MAAM,CAACM,eAAe,EAAC;YAC7C;YACA1B,aAAa,CAAC2B,mBAAmB,CAACC,IAAI,CAAC;cACrCC,YAAY,EAAET,MAAM,CAACI;YACvB,CAAC,CAAC;YACFJ,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACF;UAEA,IAAIK,YAAY,EAAE;YAChB;YACAzB,aAAa,CAAC8B,wBAAwB,CAACF,IAAI,CAAC;cAC1CG,YAAY,EAAEX,MAAM,CAACI;YACvB,CAAC,CAAC;YACF;UACF;QACF;MACF;IACF,CAAC;EAAA;AAEH;AAACQ,cAAA,GA/DoBhC,aAAa;AAEhC;AAFmBA,aAAa,CAGzBiC,aAAa,GAAG,IAAIjC,cAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}